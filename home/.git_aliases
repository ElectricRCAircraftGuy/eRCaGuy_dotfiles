# This file is part of eRCaGuy_dotfiles: https://github.com/ElectricRCAircraftGuy/eRCaGuy_dotfiles

# ==================================================================================================
# These are bash "git aliases", meaning that they are bash aliases that are intended to be related
# to or used by `git`. This file is sourced by the ".bash_aliases" file.
#
# NB: Most of my custom git commands and scripts are NOT in this alias file. Rather, they are in
# the "eRCaGuy_dotfiles/useful_scripts" folder, and are generally named "git-*".
# ==================================================================================================


# See which files have changed since some prior commit named `MY_FIRST_COMMIT`.
# Usage:
#       gs_git_files_changed MY_FIRST_COMMIT~
# OR (same thing):
#       gs_git_files_changed BASE_COMMIT
# Known limitations: works only on filenames which have no spaces or special bash chars. To make
# it handle these chars, it will require using `git diff --name-only -z`, with some more
# fancy bash trickery. See my ans:
# https://stackoverflow.com/questions/28109520/how-to-cope-with-spaces-in-file-names-when-iterating-results-from-git-diff-nam/62853776#62853776
gs_git_list_files_changed() {
    files="$(command git diff --name-only "$1")"
    echo "These are the changed files:"
    echo "$files"
    # Now optionally create a new function from this and do something with these files here if you
    # want!
}

############ TODO: fix this up!
# 1. make it stand-alone
# 2. make it work as `git branch_hash_bak [optional message]`
#   - let the optional message just be the remainder of the arguments, so it doesn't require a quote
#   - however, force it to not contain spaces, so replace spaces with underscores
#   - add the optional message into the filename itself at the end
############
# GS: git branch backups: useful to back up git branch hashes before deleting branches, so you can
# always have their hashes to go back to to checkout rather than having to dig through your `git
# reflog` forever.
# - Note that this currently requires that the GIT_BRANCH_HASH_BAK_DIR directory already exists.
# - TODO: fail more gracefully: make it check to see if this dir exists & prompt the user for
#   permission to auto-create it with `mkdir -p ${GIT_BRANCH_HASH_BAK_DIR}` if it does not.
#
# Syntax: `gs_git_branch_hash_bak [dir]` = back up to a backup file in directory "dir" if a dir is
# passed in.
##############
#
# Example usage:
#
#       # back up to `$GIT_BRANCH_HASH_BAK_DEFAULT_DIR`
#       gs_git_branch_hash_bak
#
#       # back up to "../some/dir"
#       gs_git_branch_hash_bak "../some/dir"
#
#       # back up to "../some/dir", with the user phrase "about_to_delete_branches!" at the end
#       # of the filename
#       gs_git_branch_hash_bak "../some/dir" about to delete branches!
#
GIT_BRANCH_HASH_BAK_DEFAULT_DIR="git_branch_hash_backups"
gs_git_branch_hash_bak() {
    CMD="gs_git_branch_hash_bak"
    GIT_BRANCH_HASH_BAK_DIR="$GIT_BRANCH_HASH_BAK_DEFAULT_DIR"
    EXIT_SUCCESS=0
    EXIT_ERROR=1

    # Help menu
    if [ "$1" == "-h" ] || [ "$1" == "-?" ]; then
        echo "This is a bash function in \".git_aliases\" which backs up git branch"
        echo "names & short hashes to your local \"${GIT_BRANCH_HASH_BAK_DEFAULT_DIR}\" (or other"
        echo "specified) dir."
        echo ""
        echo "Usage: $CMD [dir]"
        echo "    Back up branch names and hashes to a backup file in directory \"dir\"."
        return $EXIT_SUCCESS
    fi

    if [ -n "$1" ]; then
        # If an arg is passed in, then use it instead of the default directory!
        GIT_BRANCH_HASH_BAK_DIR="$1"
        shift # past argument (`$1`)
    fi

    # accept all additional arguments as words in a phrase to append to the end of the file name!
    user_added_phrase=""
    i=0
    num_words="${#@}"
    for word in "$@"; do
        user_added_phrase+="$word"

        # add underscores between words
        if [ "$i" -lt "$((num_words-1))" ]; then
            user_added_phrase+="_"
        fi

        ((i++))
    done
    echo "user_added_phrase = $user_added_phrase" # debugging

    mkdir -p "$GIT_BRANCH_HASH_BAK_DIR"

    DATE=`date +%Y%m%d-%H%Mhrs-%Ssec`
    BRANCH="$(gs_git_show_branch_and_hash_no_formatting)"
    REPO_ROOT="$(command git rev-parse --show-toplevel)"
    REPO=$(basename "$REPO_ROOT") # repository name
    # Replace any spaces in the repository name with underscores
    # See: https://stackoverflow.com/questions/19661267/replace-spaces-with-underscores-via-bash/19661428#19661428
    REPO="${REPO// /_}"

    if [ "$user_added_phrase" = "" ]; then
        FILE="${GIT_BRANCH_HASH_BAK_DIR}/${REPO}__git_branch_bak--${DATE}.txt"
    else
        FILE="${GIT_BRANCH_HASH_BAK_DIR}/${REPO}__git_branch_bak--${DATE}__${user_added_phrase}.txt"
    fi

    echo "Backing up 'git branch -vv' info to \"$FILE\"."
    echo -e "date                             = \"$DATE\"" > $FILE
    echo -e "repo (folder) name               = \"$REPO\"" >> $FILE
    echo -e "repo root                        = \"$REPO_ROOT\"" >> $FILE
    echo -e "pwd                              = \"$(pwd)\"" >> $FILE
    echo -e "current branch name & short hash = \"$BRANCH\"" >> $FILE
    echo -e "user-added phrase / notes        = \"$user_added_phrase\"" >> $FILE
    echo -e "\n=== \`git branch -vv\` ===\n" >> $FILE
    command git branch -vv >> $FILE
    echo "Done!"
}
#
# Alias function to do the git hash backups in a directory **1 level higher than the root of the
# base repo** so that it won't back up the branch information *within the repo*, which would
# necessitate that you add this backup dir to this git project's .gitignore file.
# - In the event of nested repos (ie: you are in a subrepo), this function will find the root of
#   the **parent** (outer) repo, and then go 1 level up from that, meaning it has found **1 level
#   up** from the base, or most-outer, repo.
# - This function accepts a user-added phrase as well, to append to the end of the filename!
#
# Example usage:
#
#       # back up to "REPO_ROOT/../$GIT_BRANCH_HASH_BAK_DEFAULT_DIR"
#       gs_git_branch_hash_bak_up1  <======
#
#       # back up to "REPO_ROOT/../$GIT_BRANCH_HASH_BAK_DEFAULT_DIR", with the user
#       # phrase "about_to_delete_branches!" at the end of the filename  <========
#       gs_git_branch_hash_bak_up1 about to delete branches!
#
gs_git_branch_hash_bak_up1() {
    local RETURN_CODE_SUCCESS=0
    local RETURN_CODE_ERROR=1

    # 1st, try to grab the outer repo root path, if this project is a subrepo. This obtains an empty
    # string if this is NOT a subrepo.
    BASE_REPO_ROOT="$(command git rev-parse --show-superproject-working-tree)" || return $RETURN_CODE_ERROR
    if [ -z "$BASE_REPO_ROOT" ]; then
        # If not in a subrepo, then try to grab the root of the regular repo.
        BASE_REPO_ROOT="$(command git rev-parse --show-toplevel)" || return $RETURN_CODE_ERROR
        echo "You are NOT in a subrepo. BASE_REPO_ROOT=$BASE_REPO_ROOT"  # debugging
    else
        echo "You ARE in a subrepo. BASE_REPO_ROOT=$BASE_REPO_ROOT"  # debugging
    fi

    BACKUP_DIR="$BASE_REPO_ROOT/../$GIT_BRANCH_HASH_BAK_DEFAULT_DIR"
    gs_git_branch_hash_bak "$BACKUP_DIR" "$@"
}

# Get just the date stamp of the last commit. You can optionally pass in a branch name or commit
# hash.
# Usage:
#       gs_git_log_get_last_commit_date [commit_hash]
gs_git_log_get_last_commit_date() {
    # get the committer date; see this A to my Q: https://stackoverflow.com/a/71385517/4561887
    # Use `"%ad"` for Author Date, or `"%cd"` for Commit Date (aka: Committer Date).
    # author_date="$(git log -1 --format="%ad" "$@")"
    committer_date="$(command git log -1 --format="%cd" "$@")"

    # Now strip off the last space-separated word in order to throw away the time zone portion
    # of the date
    str_array=($committer_date)
    str_array_len="${#str_array[@]}"
    str_array_len_minus_one=$((str_array_len - 1))

    committer_date="${str_array[@]:0:$str_array_len_minus_one}"

    echo "$committer_date"
}

# Git commit range:
# Run `git commit` with a random time and date stamp for both the **author** (via the `--date`
# option) AND the **committer** (via the `GIT_COMMITTER_DATE` variable). This is a demo script
# to show how to rewrite git history, correct dates, do `date` math with `date -d`, use random
# numbers, etc.  Use it as a learning starting point if you ever need to do something weird like
# this to correct errors in timestamps in your repo.
#
# NB: To see `git log` with **author** AND **committer** dates, run:
#       git log --pretty=fuller
# NB: install `random` from: "eRCaGuy_dotfiles/useful_scripts/random.sh"
#
# Usage:
#       gs_git_commit [<min_minutes> <max_minutes>]
#
# References:
# 1. My Q here: How to make `git log` show only the commit date, nothing else:
#    https://stackoverflow.com/q/71384830/4561887
# 1. How can one change the timestamp of an old commit in Git?:
#    https://stackoverflow.com/a/9701130/4561887
gs_git_commit_r() {
    local RETURN_CODE_SUCCESS=0
    local RETURN_CODE_ERROR=1

    DEFAULT_MIN_MINUTES="3"
    DEFAULT_MAX_MINUTES="20"

    # 'gs_git_commit'
    if [ "$#" -eq "0" ]; then
        # set defaults
        min_minutes="$DEFAULT_MIN_MINUTES"
        max_minutes="$DEFAULT_MAX_MINUTES"
    elif [ "$#" -eq "1" ] && [ "$1" != "-h" ] && [ "$1" != "--help" ]; then
        echo "ERROR: incorrect number of arguments (you must pass 0 or 2 args; see '--help' menu)."
        return 1
    # 'gs_git_commit min_minutes max_minutes'
    elif [ "$#" -eq "2" ]; then
        min_minutes="$1"
        max_minutes="$2"
    else
        if [ "$1" != "-h" ] && [ "$1" != "--help" ]; then
            echo "ERROR: too many arguments."
            return 1
        fi
    fi


    SECONDS_PER_MINUTE=60
    range_minutes=$((max_minutes - min_minutes))

    min_seconds=$((min_minutes*SECONDS_PER_MINUTE))
    max_seconds=$((max_minutes*SECONDS_PER_MINUTE))
    range_seconds=$((max_seconds - min_seconds))

    # NB: install `random` from: "eRCaGuy_dotfiles/useful_scripts/random.sh"
    random_seconds="$(random "$min_seconds" "$max_seconds")"
    ret_code="$?"
    if [ "$ret_code" -ne "$RETURN_CODE_SUCCESS" ]; then
        echo -e "\n>> ERROR: 'random' failed with ret_code $ret_code. It may not" \
            "be installed. Install it from" \
            "\"eRCaGuy_dotfiles/useful_scripts/random.sh\". <<"
        return $RETURN_CODE_ERROR
    fi

    random_minutes="$(bc <<< "scale=2; $random_seconds/$SECONDS_PER_MINUTE")"
    last_commit_date_in_repo="$(gs_git_log_get_last_commit_date)"
    
    last_commit_date_in_tmp_dir="$last_commit_date_in_repo"
    if [ -f "/tmp/llccdd" ]; then
        last_commit_date_in_tmp_dir="$(cat "/tmp/llccdd")"
    fi

    # debugging
    # echo "last_commit_date_in_repo    = $last_commit_date_in_repo"
    # echo "last_commit_date_in_tmp_dir = $last_commit_date_in_tmp_dir"

    # Convert dates to Unix timestamps
    last_commit_date_in_repo_sec="$(date -d "$last_commit_date_in_repo" +%s)"
    last_commit_date_in_tmp_dir_sec="$(date -d "$last_commit_date_in_tmp_dir" +%s)"
    
    # Get the most recent date
    if [ "$last_commit_date_in_repo_sec" -ge "$last_commit_date_in_tmp_dir_sec" ]; then
        last_commit_date="$last_commit_date_in_repo"
    else
        last_commit_date="$last_commit_date_in_tmp_dir"
    fi

    new_date="$(date +"%a %b %-d %H:%M:%S %Y %z" -d "$last_commit_date + $random_seconds seconds")"

    # debug prints
    echo "DEBUG PRINTS:"
    echo "  min_minutes                    = $min_minutes"
    echo "  max_minutes                    = $max_minutes"
    echo "  range_minutes                  = $range_minutes"
    echo "  ---"
    echo "  min_seconds                    = $min_seconds"
    echo "  max_seconds                    = $max_seconds"
    echo "  range_seconds                  = $range_seconds"
    echo "  ==="
    echo "  last_commit_date_in_repo       = \"$last_commit_date_in_repo\""
    echo "  last_commit_date_in_tmp_dir    = \"$last_commit_date_in_tmp_dir\""
    echo "  last_commit_date (more recent) = \"$last_commit_date\""
    echo "  random_seconds                 = $random_seconds"
    echo "  random_minutes                 = $random_minutes"
    echo "  new_date                       = \"$new_date\""
    echo ""

    # help menu / dry-run
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        echo "$last_commit_date" > "/tmp/llccdd"
        # Update the temporary file
        
        echo "=========="
        echo "HELP MENU:"
        echo "=========="
        echo "Git commit range: run 'git commit' with a random time and date stamp."
        echo "Usage:  gs_git_commit_r [<min_minutes> <max_minutes>]"
        echo "Run 'git log --pretty=fuller' to see 'git log' with both **author** AND" \
             "**commit** dates!"
        echo "---------"
        echo "DEFAULT_MIN_MINUTES = $DEFAULT_MIN_MINUTES"
        echo "DEFAULT_MAX_MINUTES = $DEFAULT_MAX_MINUTES"
        echo "---------"
        echo "last_commit_date_in_repo       = \"$last_commit_date_in_repo\""
        echo "last_commit_date_in_tmp_dir    = \"$last_commit_date_in_tmp_dir\""
        echo "last_commit_date (more recent) = \"$last_commit_date\""
        echo "random_seconds                 = $random_seconds"
        echo "random_minutes                 = $random_minutes"
        echo "new_date                       = \"$new_date\""
        echo "---"
        echo 'date_now="$(date +"%a %b %-d %H:%M:%S %Y %z")"'
        date_now="$(date +"%a %b %-d %H:%M:%S %Y %z")"
        echo "date_now=\"$date_now\""
        echo "date_now                       = \"$date_now\""
        echo "---------"
        echo "Date now:"
        echo "date_now                       = \"$date_now\""
        echo 'GIT_COMMITTER_DATE="$date_now" git commit --date "$date_now"'
        echo 'GIT_COMMITTER_DATE="$date_now" git commit --amend'
        echo "gcr -h"
        echo "---"
        echo "Last commit date in repo:"
        echo "last_commit_date_in_repo       = \"$last_commit_date_in_repo\""
        echo 'GIT_COMMITTER_DATE="$last_commit_date_in_repo" git commit --date "$last_commit_date_in_repo"'
        echo 'GIT_COMMITTER_DATE="$last_commit_date_in_repo" git commit --amend'
        echo "gcr -h"
        echo "---"
        echo "New date:"
        echo "new_date                       = \"$new_date\""
        echo 'GIT_COMMITTER_DATE="$new_date" git commit --date "$new_date"'
        echo 'GIT_COMMITTER_DATE="$new_date" git commit --amend'
        echo "gcr -h"
        echo "---"

        return 0
    fi

    # NB: The `--date` option sets the **author** date stamp, and the variable `GIT_COMMITTER_DATE`
    # sets the **committer** date stamp.
    # See:
    # 1. My Q here: How to make `git log` show only the commit date, nothing else:
    #    https://stackoverflow.com/q/71384830/4561887
    # 1. How can one change the timestamp of an old commit in Git?:
    #    https://stackoverflow.com/a/9701130/4561887
    GIT_COMMITTER_DATE="$new_date" command git commit --date "$new_date"
    ret_code="$?"
    # echo "ret_code = $ret_code"  # debugging
    if [ "$ret_code" -ne "$RETURN_CODE_SUCCESS" ]; then
        echo "$last_commit_date" > "/tmp/llccdd"
        echo -e "\n>> ERROR: 'git commit' failed with ret_code $ret_code. <<"
        return $RETURN_CODE_ERROR
    fi

    last_commit_date="$new_date"
    # Strip the time zone off the end of the date
    last_commit_date="${last_commit_date% *}"
    # Save the most recent date to a file for next time
    echo "$last_commit_date" > "/tmp/llccdd"
}
alias git_commit_r="gs_git_commit_r"
alias gcr="gs_git_commit_r"
